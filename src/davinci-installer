#!/usr/bin/env python3

import gi
import subprocess
import threading
import gettext
import locale
import os
import shutil
import shlex
import re

gi.require_version("Gtk", "4.0")
gi.require_version("Adw", "1")
from gi.repository import Gtk, Adw, GLib, Gdk

# --- Localization Setup ---
APP_NAME = "davinci-installer"
LOCALE_DIR = os.path.abspath("/usr/share/locale")

# Set up the locale environment
locale.setlocale(locale.LC_ALL, '')
locale.bindtextdomain(APP_NAME, LOCALE_DIR)
gettext.bindtextdomain(APP_NAME, LOCALE_DIR)
gettext.textdomain(APP_NAME)
_ = gettext.gettext
# --------------------------


class MainWindow(Adw.ApplicationWindow):
    def __init__(self, app):
        super().__init__(application=app)
        # App info and reset of potentially lost data
        self.set_title(_("DaVinci Installer"))
        self.set_default_size(750, 240)
        self.progress_visible = False
        self.progress_data = ""
        self.install_started = False
        self.error_message = None
        self.tmp_build_dir = None
        self.original_run_file_path = None

        # Main vertical box to hold header bar and content
        main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
        self.set_content(main_box)

        # Add Adwaita header bar
        self.header_bar = Adw.HeaderBar()
        self.header_bar.set_title_widget(Adw.WindowTitle.new("", ""))
        main_box.append(self.header_bar)

        css_provider = Gtk.CssProvider()
        css = """
        headerbar {
            background-color: transparent;
            border: none;
            box-shadow: none;
        }
        .titlebar {
            background-color: transparent;
        }
        """
        css_provider.load_from_data(css.encode())
        Gtk.StyleContext.add_provider_for_display(
            Gdk.Display.get_default(),
            css_provider,
            Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )

        # Main horizontal box for content
        hbox = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=20,
                       margin_top=20, margin_bottom=20, margin_start=20, margin_end=20)
        main_box.append(hbox)

        # Left vertical button group
        button_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=12)
        hbox.append(button_box)

        # A single button to start the installation process
        self.btn_install = Gtk.Button(label=_("Select Installer File"))
        self.btn_toggle_progress = Gtk.Button(label=_("Show progress"), sensitive=False)

        self.btn_install.set_margin_start(12)
        self.btn_install.set_margin_end(12)
        self.btn_install.set_vexpand(True)
        self.btn_install.add_css_class("suggested-action")

        self.btn_toggle_progress.set_margin_bottom(12)
        self.btn_toggle_progress.set_margin_start(12)
        self.btn_toggle_progress.set_margin_end(12)
        self.btn_toggle_progress.set_vexpand(True)

        self.btn_install.connect("clicked", self.on_install_clicked)
        self.btn_toggle_progress.connect("clicked", self.on_toggle_progress_clicked)

        button_box.append(self.btn_install)
        button_box.append(self.btn_toggle_progress)

        # Right side: output or instructions
        self.output_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        hbox.append(self.output_box)

        # Info label (default message or in-progress/completion info)
        self.info_label = Gtk.Label()
        self.set_welcome_message()
        self.info_label.set_vexpand(True)
        self.info_label.set_hexpand(True)
        self.info_label.set_wrap(True)
        self.output_box.append(self.info_label)

        # Output text view inside a scrolled window within a frame
        self.output_buffer = Gtk.TextBuffer()
        self.output_textview = Gtk.TextView.new_with_buffer(self.output_buffer)
        self.output_textview.set_wrap_mode(Gtk.WrapMode.WORD)
        self.output_textview.set_editable(False)
        self.output_textview.set_cursor_visible(False)
        self.output_textview.set_monospace(True)
        self.output_textview.set_left_margin(10)
        self.output_textview.set_right_margin(10)
        self.output_textview.set_top_margin(5)
        self.output_textview.set_bottom_margin(5)

        # Create a scrolled window
        self.scrolled_window = Gtk.ScrolledWindow()
        self.scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        self.scrolled_window.set_child(self.output_textview)
        self.scrolled_window.set_hexpand(True)
        self.scrolled_window.set_vexpand(True)

        self.output_frame = Gtk.Frame()
        self.output_frame.set_child(self.scrolled_window)
        self.output_frame.set_hexpand(True)
        self.output_frame.set_vexpand(True)
        self.output_frame.set_visible(False)

        self.output_box.append(self.output_frame)

        # Connect to the close-request signal to prevent closing during installation
        self.connect("close-request", self.on_close_request)

    def on_close_request(self, *args):
        # Handle the close-request signal to prevent closing during installation
        if self.install_started:
            # Show a notification or dialog to inform the user
            dialog = Adw.MessageDialog(
                heading=_("Installation in Progress"),
                body=_("Please wait until the installation is complete before closing the application."),
                transient_for=self,
                modal=True
            )
            dialog.add_response("ok", _("OK"))
            dialog.set_default_response("ok")
            dialog.set_close_response("ok")
            dialog.present()
            return True  # Prevents the window from closing
        return False  # Allows the window to close

    def set_welcome_message(self):
        self.info_label.set_margin_top(-15)
        self.info_label.set_markup(
            '<span size="large" weight="bold">{}</span>\n\n{}'.format(
                _("Welcome to DaVinci Resolve Installer!"),
                _("The app is created to help you with the installation of the DaVinci Resolve for Linux. \nDownload the installer for the Linux, unzip it and let the app handle the rest. \n\nWorks both for DaVinci Resolve and DaVinci Resolve Studio.")
            )
        )

    def on_install_clicked(self, button):
        # Starts the file selection process
        self.create_file_chooser()

    def create_file_chooser(self):
        """Creates and shows a file chooser dialog."""
        title = _("Select DaVinci Resolve .run file")
        file_chooser = Gtk.FileChooserDialog(
            title=title,
            transient_for=self,
            modal=True,
            action=Gtk.FileChooserAction.OPEN
        )
        
        file_chooser.add_button(_("Cancel"), Gtk.ResponseType.CANCEL)
        file_chooser.add_button(_("Open"), Gtk.ResponseType.OK)
        
        file_filter = Gtk.FileFilter()
        file_filter.set_name(_("DaVinci Resolve Installer (*.run)"))
        file_filter.add_pattern("*.run")
        file_chooser.add_filter(file_filter)
        
        # Connect the response signal
        file_chooser.connect("response", self.on_file_chooser_response)
        file_chooser.present()

    def prepare_build_environment(self, run_file_path, is_studio):
        """Creates a temporary build dir, copies files, and moves the installer."""
        original_dir = os.path.dirname(run_file_path)
        # Define and create the temporary build directory
        self.tmp_build_dir = os.path.join(original_dir, "davinci_tmp")
        os.makedirs(self.tmp_build_dir, exist_ok=True)
        
        # Store original path for cleanup
        self.original_run_file_path = run_file_path

        dest_dir = self.tmp_build_dir # All top-level files go here

        # Define source paths based on whether it's a Studio version
        if is_studio:
            source_dir = "/usr/share/linexin/davincistudio"
            install_file_name = "davinci-resolve-studio.install"
        else:
            source_dir = "/usr/share/linexin/davinci"
            install_file_name = "davinci-resolve.install"

        # Define all source files
        source_pkgbuild = os.path.join(source_dir, "PKGBUILD")
        source_panels_script = os.path.join(source_dir, "davinci-control-panels-setup.sh")
        source_install_file = os.path.join(source_dir, install_file_name)

        # Check if all source files exist
        for f in [source_pkgbuild, source_panels_script, source_install_file]:
            if not os.path.exists(f):
                raise FileNotFoundError(_("Required file not found at {}").format(f))

        # 1. Create 'src' directory inside the tmp dir
        src_dir = os.path.join(self.tmp_build_dir, "src")
        os.makedirs(src_dir, exist_ok=True)

        # 2. Copy PKGBUILD and .install file to tmp_dir
        shutil.copy2(source_pkgbuild, os.path.join(dest_dir, "PKGBUILD"))
        shutil.copy2(source_install_file, os.path.join(dest_dir, install_file_name))

        # 3. Copy panels script to the new 'src' directory
        shutil.copy2(source_panels_script, os.path.join(src_dir, "davinci-control-panels-setup.sh"))
        
        # 4. Update the pkgver in the copied PKGBUILD
        dest_pkgbuild = os.path.join(dest_dir, "PKGBUILD")
        filename = os.path.basename(run_file_path)
        match = re.search(r"DaVinci_Resolve(?:_Studio)?_([\d\.]+)_Linux\.run", filename)
        if not match:
            raise ValueError(_("Could not extract version number from filename: {}").format(filename))
        new_version = match.group(1)

        with open(dest_pkgbuild, "r") as f:
            lines = f.readlines()
        new_lines = [f"pkgver={new_version}\n" if l.strip().startswith("pkgver=") else l for l in lines]
        with open(dest_pkgbuild, "w") as f:
            f.writelines(new_lines)

        # 5. Move the .run file from its original location into 'src'
        shutil.move(run_file_path, os.path.join(src_dir, filename))


    def on_file_chooser_response(self, dialog, response_id):
        """Handles file selection, prepares build environment, and starts installation."""
        if response_id == Gtk.ResponseType.OK:
            file = dialog.get_file()
            if file:
                run_file_path = file.get_path()
                filename = os.path.basename(run_file_path)

                # Determine product based on filename
                is_studio = "_Studio_" in filename
                product_name = "DaVinci Resolve Studio" if is_studio else "DaVinci Resolve"

                try:
                    # 1. Prepare the entire build environment in a temporary directory
                    self.prepare_build_environment(run_file_path, is_studio)

                    # 2. Define the new installation command to run makepkg in the temp dir
                    quoted_tmp_dir = shlex.quote(self.tmp_build_dir)
                    command = f"cd {quoted_tmp_dir} && export PACMAN_AUTH=run0 && makepkg -si --noconfirm"
                    
                    # 3. Start the installation process
                    self.begin_install(command, product_name)

                except Exception as e:
                    self.show_error_message(_("Failed to prepare for installation: {}").format(e))
                    # If prep fails, clean up immediately
                    self.cleanup_build_environment()

            else:
                self.show_error_message(_("No file selected. Installation cancelled."))
        else:
            self.show_error_message(_("Installation cancelled."))
        
        dialog.destroy()

    def cleanup_build_environment(self):
        """Moves the installer back and removes the temporary build directory."""
        if not self.tmp_build_dir or not self.original_run_file_path:
            return

        try:
            # Path to the .run file inside the tmp/src directory
            tmp_run_file_path = os.path.join(self.tmp_build_dir, "src", os.path.basename(self.original_run_file_path))

            # Move the .run file back to its original location if it exists
            if os.path.exists(tmp_run_file_path):
                shutil.move(tmp_run_file_path, self.original_run_file_path)

            # Remove the temporary directory
            if os.path.exists(self.tmp_build_dir):
                shutil.rmtree(self.tmp_build_dir)
                
        except Exception as e:
            # If cleanup fails, just print an error to the console.
            print(_("Warning: Failed to clean up temporary build files: {}").format(e))
        finally:
            # Reset the attributes to avoid accidental reuse
            self.tmp_build_dir = None
            self.original_run_file_path = None

    def show_error_message(self, message):
        # Display error message in info_label
        self.info_label.set_markup(
            f'<span color="red" weight="bold">{message}</span>'
        )
        self.info_label.set_visible(True)

    def begin_install(self, command, product_name):
        self.install_started = True
        self.header_bar.set_sensitive(False)
        self.header_bar.set_opacity(0.5) # Dim instead of making invisible
        self.btn_install.set_sensitive(False)
        self.btn_toggle_progress.set_sensitive(True)
        self.current_product = product_name
        self.error_message = None  

        self.info_label.set_label(_("Installing {}...").format(product_name))
        self.output_frame.set_visible(False)
        self.info_label.set_visible(True)
        self.progress_data = ""
        self.progress_visible = False
        self.btn_toggle_progress.set_label(_("Show progress"))
        self.output_buffer.set_text("")  

        self.run_shell_command(command)

    def on_toggle_progress_clicked(self, button):
        self.progress_visible = not self.progress_visible

        if self.progress_visible:
            self.btn_toggle_progress.set_label(_("Hide progress"))
            self.output_buffer.set_text(self.progress_data or _("[console output]"))
            self.output_frame.set_visible(True)
            self.info_label.set_visible(False)
            GLib.idle_add(self.scroll_to_end)
        else:
            self.btn_toggle_progress.set_label(_("Show progress"))
            self.output_frame.set_visible(False)
            self.info_label.set_label(_("Installing {}...").format(self.current_product))
            self.info_label.set_visible(True)

    def run_shell_command(self, command):
        def stream_output():
            try:
                process = subprocess.Popen(command, 
                    shell=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    text=True,
                    encoding='utf-8',
                    errors='replace'
                )

                for line in iter(process.stdout.readline, ''):
                    if line:
                        self.progress_data += line
                        GLib.idle_add(self.update_output_buffer, self.progress_data)

                process.stdout.close()
                return_code = process.wait()
                if return_code != 0:
                    # This will now be correctly triggered on auth failure
                    self.error_message = _("Process exited with code {}").format(return_code)
            except Exception as e:
                self.error_message = str(e)
                self.progress_data += _("\nError: {}").format(e)
                GLib.idle_add(self.update_output_buffer, self.progress_data)

            GLib.idle_add(self.finish_installation)

        threading.Thread(target=stream_output, daemon=True).start()

    def update_output_buffer(self, text):
        if self.progress_visible:
            self.output_buffer.set_text(text)
            GLib.idle_add(self.scroll_to_end)
        return False

    def scroll_to_end(self):
        end_iter = self.output_buffer.get_end_iter()
        self.output_textview.scroll_to_iter(end_iter, 0.0, False, 0.0, 0.0)
        return False

    def finish_installation(self):
        self.install_started = False
        self.header_bar.set_sensitive(True)
        self.header_bar.set_opacity(1)
        self.btn_install.set_sensitive(True)
        self.btn_toggle_progress.set_sensitive(False)
        
        if self.error_message:
            self.info_label.set_markup(f'<span color="red" weight="bold">{_("Installation failed: {}").format(self.error_message)}</span>')
        else:
            self.info_label.set_markup(f'<span color="green" weight="bold">{_("Successfully installed {}!").format(self.current_product)}</span>')
        
        self.info_label.set_visible(True)
        self.output_frame.set_visible(False)
        self.progress_visible = False
        self.btn_toggle_progress.set_label(_("Show progress"))

        # Clean up the build environment regardless of success or failure
        self.cleanup_build_environment()
        
        return False

class DaVinciApp(Adw.Application):
    def __init__(self):
        super().__init__(application_id="com.example.DaVinciInstaller")

    def do_activate(self):
        win = MainWindow(self)
        win.present()

if __name__ == "__main__":
    import sys
    app = DaVinciApp()
    sys.exit(app.run())
